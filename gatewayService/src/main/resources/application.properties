server.port=8052
# The port number that the server will listen on.

spring.application.name=API-GATEWAY
# The name of the Spring application.

spring.config.import=configserver:http://${CONFIG_SERVER_ADDRESS:localhost}:8051
# Import the configuration from the config server. The address can be overridden with an environment variable.


# The ID for the first route in the API gateway.
# The URI for the first route, using load balancing for the ORDER-SERVICE.
# The path predicate for the first route. Routes requests matching this path to ORDER-SERVICE.
# Adds a CircuitBreaker filter to the first route.
# The name of the CircuitBreaker configuration for the first route.
# The fallback URI to use when the CircuitBreaker is open for the first route.
spring.cloud.gateway.routes[0].id=BOOKING-SERVICE
spring.cloud.gateway.routes[0].uri=lb://BOOKING-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/makeAppointment/**
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=BOOKING-SERVICE
spring.cloud.gateway.routes[0].filters[0].args.fallbackuri=forward:/bookingServiceFallback


spring.cloud.gateway.routes[0].filters[1].name=RequestRateLimiter
# Adds a RequestRateLimiter filter to the first route.

spring.cloud.gateway.routes[0].filters[1].args.redis-rate-limiter.replenishRate=1
# The replenish rate for the Redis rate limiter for the first route.

spring.cloud.gateway.routes[0].filters[1].args.redis-rate-limiter.burstCapacity=1
# The burst capacity for the Redis rate limiter for the first route.

spring.cloud.gateway.routes[0].filters[1].args.key-resolver=#{@userIdSolver}
# The key resolver to use for rate limiting for the first route.

spring.cloud.gateway.routes[1].id=SALON-SERVICE
# The ID for the second route in the API gateway.

spring.cloud.gateway.routes[1].uri=lb://SALON-SERVICE
# The URI for the second route, using load balancing for the PRODUCT-SERVICE.

spring.cloud.gateway.routes[1].predicates[0]=Path=/salons/**
# The path predicate for the second route. Routes requests matching this path to PRODUCT-SERVICE.

spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
# Adds a CircuitBreaker filter to the second route.

spring.cloud.gateway.routes[1].filters[0].args.name=SALON-SERVICE
# The name of the CircuitBreaker configuration for the second route.

spring.cloud.gateway.routes[1].filters[0].args.fallbackuri=forward:/salonServiceFallback
# The fallback URI to use when the CircuitBreaker is open for the second route.

spring.cloud.gateway.routes[1].filters[1].name=RequestRateLimiter
# Adds a RequestRateLimiter filter to the second route.

spring.cloud.gateway.routes[1].filters[1].args.redis-rate-limiter.replenishRate=1
# The replenish rate for the Redis rate limiter for the second route.

spring.cloud.gateway.routes[1].filters[1].args.redis-rate-limiter.burstCapacity=1
# The burst capacity for the Redis rate limiter for the second route.

spring.cloud.gateway.routes[1].filters[1].args.key-resolver=#{@userIdSolver}
# The key resolver to use for rate limiting for the second route.

spring.cloud.gateway.routes[2].id=SERVICEMANAGEMENT-SERVICE
# The ID for the third route in the API gateway.

spring.cloud.gateway.routes[2].uri=lb://SERVICEMANAGEMENT-SERVICE
# The URI for the third route, using load balancing for the PAYMENT-SERVICE.

spring.cloud.gateway.routes[2].predicates[0]=Path=/services/**
# The path predicate for the third route. Routes requests matching this path to PAYMENT-SERVICE.

spring.cloud.gateway.routes[2].filters[0].name=CircuitBreaker
# Adds a CircuitBreaker filter to the third route.

spring.cloud.gateway.routes[2].filters[0].args.name=SERVICEMANAGEMENT-SERVICE
# The name of the CircuitBreaker configuration for the third route.

spring.cloud.gateway.routes[2].filters[0].args.fallbackuri=forward:/serviceManagementServiceFallback
# The fallback URI to use when the CircuitBreaker is open for the third route.

spring.cloud.gateway.routes[2].filters[1].name=RequestRateLimiter
# Adds a RequestRateLimiter filter to the third route.

spring.cloud.gateway.routes[2].filters[1].args.redis-rate-limiter.replenishRate=1
# The replenish rate for the Redis rate limiter for the third route.

spring.cloud.gateway.routes[2].filters[1].args.redis-rate-limiter.burstCapacity=1
# The burst capacity for the Redis rate limiter for the third route.

spring.cloud.gateway.routes[2].filters[1].args.key-resolver=#{@userIdSolver}
# The key resolver to use for rate limiting for the third route.

okta.oauth2.issuer=https://dev-78291268.okta.com/oauth2/default
# The issuer URI for Okta OAuth2.

okta.oauth2.audience=api://default
# The audience for the Okta OAuth2 configuration.

okta.oauth2.client-id=0oaiin5tyqj0KbxR65d7
# The client ID for the Okta OAuth2 configuration.

okta.oauth2.client-secret=3TpaJalRYM4WXXOc53fq1r6Jr__RAWq91ZRrRcUyFe1MnHd9ERuImGkj_EqdDpr6
# The client secret for the Okta OAuth2 configuration.

okta.oauth2.scopes=openid, profile, email, offline-access
# The scopes requested for the Okta OAuth2 configuration.

okta.oauth2.redirect-uri=http://localhost:8052/login/oauth2/code/okta
# The redirect URI for the Okta OAuth2 configuration.
